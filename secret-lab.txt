secret lab
--------------------------
echo -n 'root' > ./username.txt
echo -n 'Mq2D#(8gf09' > ./password.txt

kubectl create secret generic db-cerds \
  --from-file=./username.txt \
  --from-file=./password.txt

kubectl get secret/db-cerds

kubectl describe secret/db-cerds
--------------------------


echo -n 'root' | base64
cm9vdA==
echo -n 'Mq2D#(8gf09' | base64
TXEyRCMoOGdmMDk=

create secret.yaml

apiVersion: v1
data: 
  password: TXEyRCMoOGdmMDk=
  username: cm9vdA==
kind: Secret
metadata: 
  name: database-creds
type: Opaque



kubectl create -f secret.yaml


kubectl get secret/database-creds
NAME             TYPE      DATA      AGE
database-creds   Opaque    2         1m
---------------------

use secret as environment variable

create pod-php.yaml

apiVersion: v1
kind: Pod
metadata: 
  name: php-mysql-app
spec: 
  containers: 
    - 
      env: 
        - 
          name: MYSQL_USER
          valueFrom: 
            secretKeyRef: 
              key: username
              name: database-creds
        - 
          name: MYSQL_PASSWORD
          valueFrom: 
            secretKeyRef: 
              key: password
              name: database-creds
      image: "php:latest"
      name: php-app

kubectl create -f pod-php.yaml
kbuectl describe pod php-mysql-app


----------------

map secret as volume, create sec-pod-redis.yaml

apiVersion: v1
kind: Pod
metadata: 
  name: redis-pod
spec: 
  containers: 
    - 
      image: redis
      name: redis-pod
      volumeMounts: 
        - 
          mountPath: /etc/dbcreds
          name: dbcreds
          readOnly: true
  volumes: 
    - 
      name: dbcreds
      secret: 
        secretName: database-creds

kubectl create -f sec-pod-redis.yaml

 kubectl describe pods redis-pod

check inside the container "/etc/dbcreds"
kubectl exec redis-pod -c redis-pod -it -- ls /etc/dbcreds/
